# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/external-secrets.io/externalsecret_v1.json
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: jellyfin-sso-config
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: doppler
  target:
    name: jellyfin-sso-config
    template:
      data:
        SSO-Auth.xml: |
          <?xml version="1.0" encoding="utf-8"?>
          <PluginConfiguration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
            <SamlConfigs />
            <OidConfigs>
              <item>
                <key>
                  <string>authelia</string>
                </key>
                <value>
                  <PluginConfiguration>
                    <OidEndpoint>https://sso.stevewm.dev</OidEndpoint>
                    <OidClientId>jellyfin</OidClientId>
                    <OidSecret>{{ .JELLYFIN_OAUTH_CLIENT_SECRET }}</OidSecret>
                    <Enabled>true</Enabled>
                    <EnableAuthorization>true</EnableAuthorization>
                    <EnableAllFolders>true</EnableAllFolders>
                    <EnabledFolders />
                    <AdminRoles>
                      <string>admins</string>
                    </AdminRoles>
                    <Roles>
                      <string>people</string>
                      <string>admins</string>
                    </Roles>
                    <EnableFolderRoles>false</EnableFolderRoles>
                    <EnableLiveTvRoles>false</EnableLiveTvRoles>
                    <EnableLiveTv>false</EnableLiveTv>
                    <EnableLiveTvManagement>false</EnableLiveTvManagement>
                    <LiveTvRoles />
                    <LiveTvManagementRoles />
                    <FolderRoleMappings />
                    <RoleClaim>groups</RoleClaim>
                    <OidScopes>
                      <string>groups</string>
                    </OidScopes>
                    <CanonicalLinks></CanonicalLinks>
                    <DisableHttps>false</DisableHttps>
                    <DoNotValidateEndpoints>false</DoNotValidateEndpoints>
                    <DoNotValidateIssuerName>false</DoNotValidateIssuerName>
                    <SchemeOverride>https</SchemeOverride>
                  </PluginConfiguration>
                </value>
              </item>
            </OidConfigs>
          </PluginConfiguration>
  data:
    - secretKey: JELLYFIN_OAUTH_CLIENT_SECRET
      remoteRef:
        key: JELLYFIN_OAUTH_CLIENT_SECRET

# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/external-secrets.io/externalsecret_v1.json
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: jellyfin-exporter
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: doppler
  target:
    name: jellyfin-exporter
    template:
      data:
        # https://sno.ws/jellyfin-stats/#update-2024-02-23
        jellyfin.yaml: |
          modules:
            jellyfin:
              headers:
                Authorization: MediaBrowser Token={{ .JELLYFIN_API_KEY }}
                Content-Type: application/json
                accept: application/json

              # The body is no longer needed since this is now GET

              # This will return all active sessions regardless of
              # whether something is playing. You can use a combination
              # of label and value filters in Grafana to only get actively
              # playing sessions
              metrics:
              - name: jellyfin
                type: object
                help: User playback metrics from Jellyfin
                path: '{ [*] }'
                labels:
                  user_name: '{ .UserName }'
                  # Use PromQL label_join and label_replace to concatenate
                  # these values into a nice item description
                  item_type: '{ .NowPlayingItem.Type }'
                  item_name: '{ .NowPlayingItem.Name }'
                  item_path: '{ .NowPlayingItem.Path }'
                  series_name: '{ .NowPlayingItem.SeriesName }'
                  episode_index: 'e{ .NowPlayingItem.IndexNumber }'
                  season_index: 's{ .NowPlayingItem.ParentIndexNumber }'
                  client_name: '{ .Client }'
                  device_name: '{ .DeviceName }'
                values:
                  is_paused: '{ .PlayState.IsPaused }'

  data:
    - secretKey: JELLYFIN_API_KEY
      remoteRef:
        key: JELLYFIN_API_KEY
