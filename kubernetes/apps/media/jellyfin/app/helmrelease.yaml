# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/helm.toolkit.fluxcd.io/helmrelease_v2.json
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app jellyfin
spec:
  interval: 30m
  maxHistory: 3
  chart:
    spec:
      chart: app-template
      version: 3.7.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  uninstall:
    keepHistory: false
  values:
    defaultPodOptions:
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: ${APP_UID}
        runAsGroup: ${APP_GID}
        fsGroup: ${APP_GID}
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile:
          type: RuntimeDefault

    controllers:
      jellyfin:
        annotations:
          reloader.stakater.com/auto: "true"

        pod:
          labels:
            monitoring.home.arpa/prometheus: allow
            egress.home.arpa/kubedns: allow
            ingress.home.arpa/nginx-external: allow
            ingress.home.arpa/homepage: allow
          nodeSelector:
            intel.feature.node.kubernetes.io/gpu: "true"

        containers:
          app:
            image:
              repository: ghcr.io/jellyfin/jellyfin
              tag: 10.10.3@sha256:17c3a8d9dddb97789b5f37112840ebf96566442c14d4754193a6c2eb154bc221
            env:
              DOTNET_SYSTEM_IO_DISABLEFILELOCKING: "true"
              JELLYFIN_FFmpeg__probesize: 50000000
              JELLYFIN_FFmpeg__analyzeduration: 50000000
              JELLYFIN_PublishedServerUrl: jellyfin.media.svc.cluster.local:8096
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: 8096
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
            resources:
              requests:
                gpu.intel.com/i915: 1
                cpu: 100m
                memory: 512Mi
              limits:
                gpu.intel.com/i915: 1
                memory: 4Gi

          exporter:
            image:
              repository: quay.io/prometheuscommunity/json-exporter
              tag: v0.7.0@sha256:3a777171d39ad435cb39519e84e0a8b5c63c7e716cc06011f8140cfaabfc1baf
            args:
              - --config.file=/exporter/jellyfin.yaml

    service:
      app:
        controller: *app
        ports:
          http:
            port: 8096
          exporter:
            port: 7979

    ingress:
      app:
        className: nginx-external
        hosts:
          - host: ${APP_SUBDOMAIN}.${DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        annotations:
          external-dns.alpha.kubernetes.io/target: ext.${DOMAIN}
          gethomepage.dev/name: *app
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: media
          gethomepage.dev/icon: jellyfin.png
          gethomepage.dev/widget.key: "{{ `{{ HOMEPAGE_VAR_JELLYFIN_API_KEY }}` }}"
          gethomepage.dev/widget.type: jellyfin
          gethomepage.dev/widget.url: "http://jellyfin.media.svc.cluster.local:8096"
          nginx.ingress.kubernetes.io/configuration-snippet: |
            proxy_set_header Accept-Encoding "";
            sub_filter
            '</head>'
            '<link rel="stylesheet" type="text/css" href="https://themes.${DOMAIN}/css/base/jellyfin/plex.css">
            </head>';
            sub_filter_once on;

    persistence:
      config:
        existingClaim: ${VOLSYNC_CLAIM}
      cache:
        type: emptyDir
      transcode:
        type: emptyDir
      media:
        type: nfs
        server: ${NAS}
        path: /volume1/Media
        globalMounts:
          - path: /data/media
      exporter: # Config for json exporter
        type: secret
        name: jellyfin-exporter
        globalMounts:
          - path: /exporter/jellyfin.yaml
            subPath: jellyfin.yaml
            readOnly: true
