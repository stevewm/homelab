# yaml-language-server: $schema=https://taskfile.dev/schema.json
---
version: "3"

tasks:
  webhook:
    desc: Print the FluxCD webhook URL
    preconditions:
      - which kubectl
    silent: true
    cmds:
      - echo "https://{{ .DOMAIN }}{{ .WEBHOOK_PATH }}"
    vars:
      DOMAIN:
        sh: kubectl get httproute github-webhook -n flux-system -o jsonpath='{.spec.hostnames[0]}'
      WEBHOOK_PATH:
        sh: kubectl get receiver homelab-github-receiver -n flux-system -o jsonpath='{.status.webhookPath}'

  cleanup:
    desc: Clean up pods with a Failed/Pending/Succeeded phase
    preconditions:
      - which kubectl
    cmds:
      - for:
          matrix:
            PHASE:
              - Failed
              - Pending
              - Succeeded
        cmd: kubectl delete pods --field-selector status.phase={{.ITEM.PHASE}} -A --ignore-not-found=true

  sync-es:
    desc: Force sync all ExternalSecret resources
    preconditions:
      - which kubectl
      - test -f "${KUBECONFIG}"
    vars:
      SECRETS:
        sh: kubectl get externalsecret --all-namespaces --no-headers --output=jsonpath='{range .items[*]}{.metadata.namespace},{.metadata.name}{"\n"}{end}'
    cmds:
      - for:
          var: SECRETS
          split: "\n"
        cmd: kubectl --namespace {{splitList "," .ITEM | first}} annotate externalsecret {{splitList "," .ITEM | last}} force-sync="{{now | unixEpoch}}" --overwrite

  oidc:
    desc: |
      Create OIDC secrets for an application and push them to Doppler [APP=required]
    silent: true
    dir: "{{ .K8S_DIR }}"
    preconditions:
      - which docker doppler
    vars:
      AUTHELIA_OUTPUT:
        sh: docker run --rm authelia/authelia:latest authelia crypto hash generate pbkdf2 --variant sha512 --random --random.length 72 --random.charset rfc3986
      APP_CLIENT_SECRET:
        sh: "echo '{{ .AUTHELIA_OUTPUT }}' | grep '^Random Password:' | cut -d':' -f2- | xargs"
      APP_CLIENT_SECRET_DIGEST:
        sh: "echo '{{ .AUTHELIA_OUTPUT }}' | grep '^Digest:' | cut -d':' -f2- | xargs"
    requires:
      vars: [APP]
    cmds:
      - echo "Creating OIDC secrets for {{ .APP }}"
      - |
        if [ -z "{{ .APP_CLIENT_SECRET }}" ] || [ -z "{{ .APP_CLIENT_SECRET_DIGEST }}" ]; then
          echo "Error: Failed to generate secret or digest"
          exit 1
        fi
      # Use printf to properly escape special characters
      - |
        SECRET="{{ .APP_CLIENT_SECRET }}"
        DIGEST="{{ .APP_CLIENT_SECRET_DIGEST }}"
        doppler secrets set "{{ .APP | upper }}_OAUTH_CLIENT_SECRET" "$SECRET"
        doppler secrets set "{{ .APP | upper }}_OAUTH_CLIENT_SECRET_DIGEST" "$DIGEST"
